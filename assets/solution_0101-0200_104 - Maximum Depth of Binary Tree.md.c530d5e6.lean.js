import{_ as s,c as a,o as n,a as e}from"./app.de037eaf.js";const y=JSON.parse('{"title":"104. Maximum Depth of Binary Tree","description":"","frontmatter":{},"headers":[{"level":2,"title":"Problem Statement:","slug":"problem-statement","link":"#problem-statement","children":[{"level":3,"title":"Example 1:","slug":"example-1","link":"#example-1","children":[]},{"level":3,"title":"Example 2:","slug":"example-2","link":"#example-2","children":[]},{"level":3,"title":"Constraints:","slug":"constraints","link":"#constraints","children":[]}]},{"level":2,"title":"Solutions:","slug":"solutions","link":"#solutions","children":[{"level":3,"title":"Java","slug":"java","link":"#java","children":[]},{"level":3,"title":"...","slug":"","link":"#","children":[]}]}],"relativePath":"solution/0101-0200/104 - Maximum Depth of Binary Tree.md"}'),l={name:"solution/0101-0200/104 - Maximum Depth of Binary Tree.md"},o=e("",17),t=[o];function p(r,c,i,h,D,d){return n(),a("div",null,t)}const A=s(l,[["render",p]]);export{y as __pageData,A as default};
